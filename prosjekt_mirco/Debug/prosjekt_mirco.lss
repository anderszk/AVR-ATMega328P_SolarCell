
prosjekt_mirco.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000474  000004e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000474  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000052c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e85  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a0  00000000  00000000  000014d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000723  00000000  00000000  00001d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000214  00000000  00000000  0000249c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000521  00000000  00000000  000026b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007af  00000000  00000000  00002bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003380  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  8e:	0c 94 38 02 	jmp	0x470	; 0x470 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <readPin>:
#include "usart.h"

#define USART_BAUDRATE 9600
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)

void readPin(int pin){
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	ec 01       	movw	r28, r24
	printString("Sensorvalue: ");
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	91 e0       	ldi	r25, 0x01	; 1
  a0:	0e 94 32 01 	call	0x264	; 0x264 <printString>
	printWord(pin);
  a4:	ce 01       	movw	r24, r28
  a6:	0e 94 45 01 	call	0x28a	; 0x28a <printWord>
	printString("\r\n");
  aa:	8e e0       	ldi	r24, 0x0E	; 14
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	0e 94 32 01 	call	0x264	; 0x264 <printString>
}
  b2:	df 91       	pop	r29
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <main>:
	uint8_t position = 90;
	uint16_t potMeter;
	uint16_t lightSensor1;
	uint16_t lightSensor2;
	
	UBRR0 = BAUD_PRESCALE;
  b8:	87 e6       	ldi	r24, 0x67	; 103
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  c0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	initUSART();
  ca:	0e 94 19 01 	call	0x232	; 0x232 <initUSART>
	ADC_Init();
  ce:	0e 94 c9 00 	call	0x192	; 0x192 <ADC_Init>
	Timer1_PWM_init();
  d2:	0e 94 98 00 	call	0x130	; 0x130 <Timer1_PWM_init>
	printString("\r\n");
}

int main(void) {
	
	uint8_t position = 90;
  d6:	ca e5       	ldi	r28, 0x5A	; 90
	ADC_Init();
	Timer1_PWM_init();
	
	do{
		
		lightSensor1 = ADC_Conversion(0);
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 a7 00 	call	0x14e	; 0x14e <ADC_Conversion>
  de:	8c 01       	movw	r16, r24
		lightSensor2 = ADC_Conversion(1);;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 a7 00 	call	0x14e	; 0x14e <ADC_Conversion>
  e6:	7c 01       	movw	r14, r24
		potMeter = ADC_Conversion(2);
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	0e 94 a7 00 	call	0x14e	; 0x14e <ADC_Conversion>

		position = correctPosition(potMeter, lightSensor1, lightSensor2, position);
  ee:	2c 2f       	mov	r18, r28
  f0:	a7 01       	movw	r20, r14
  f2:	b8 01       	movw	r22, r16
  f4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <correctPosition>
  f8:	c8 2f       	mov	r28, r24
		
		if (validatePosition(position) && validateTolerance(lightSensor1, lightSensor2)){
  fa:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <validatePosition>
  fe:	88 23       	and	r24, r24
 100:	51 f0       	breq	.+20     	; 0x116 <main+0x5e>
 102:	b7 01       	movw	r22, r14
 104:	c8 01       	movw	r24, r16
 106:	0e 94 e7 00 	call	0x1ce	; 0x1ce <validateTolerance>
 10a:	88 23       	and	r24, r24
 10c:	21 f0       	breq	.+8      	; 0x116 <main+0x5e>
			moveServo(position);
 10e:	8c 2f       	mov	r24, r28
 110:	0e 94 cd 00 	call	0x19a	; 0x19a <moveServo>
 114:	08 c0       	rjmp	.+16     	; 0x126 <main+0x6e>
		}
		else if (position > 180){
 116:	c5 3b       	cpi	r28, 0xB5	; 181
 118:	18 f4       	brcc	.+6      	; 0x120 <main+0x68>
			position = 180;
		}
		else if (position < 5){
 11a:	c5 30       	cpi	r28, 0x05	; 5
 11c:	18 f0       	brcs	.+6      	; 0x124 <main+0x6c>
 11e:	03 c0       	rjmp	.+6      	; 0x126 <main+0x6e>
		
		if (validatePosition(position) && validateTolerance(lightSensor1, lightSensor2)){
			moveServo(position);
		}
		else if (position > 180){
			position = 180;
 120:	c4 eb       	ldi	r28, 0xB4	; 180
 122:	01 c0       	rjmp	.+2      	; 0x126 <main+0x6e>
		}
		else if (position < 5){
			position = 1;
 124:	c1 e0       	ldi	r28, 0x01	; 1
		}
		
		
		readPin(position);
 126:	8c 2f       	mov	r24, r28
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 4b 00 	call	0x96	; 0x96 <readPin>
		_delay_ms(30000);
		moveServo(179);
		_delay_ms(30000);
		*/

	} while(1);
 12e:	d4 cf       	rjmp	.-88     	; 0xd8 <main+0x20>

00000130 <Timer1_PWM_init>:
#define POSITION_MAX 180

//Timer initialization
void Timer1_PWM_init(){
	
	DDRB = (1<<DDB1); // Setter PB1 som output. (pin 9)
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	84 b9       	out	0x04, r24	; 4

	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(1<<WGM11)|(0<<WGM10);
 134:	82 e8       	ldi	r24, 0x82	; 130
 136:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>

	TCCR1B = (1<<CS11)|(1<<WGM13)|(1<<WGM12);
 13a:	8a e1       	ldi	r24, 0x1A	; 26
 13c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	ICR1 = SERVO_PERIOD; // Periodetid på 20ms (50Hz)
 140:	80 e4       	ldi	r24, 0x40	; 64
 142:	9c e9       	ldi	r25, 0x9C	; 156
 144:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 148:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 14c:	08 95       	ret

0000014e <ADC_Conversion>:


//ADC
int ADC_Conversion(int8_t pin){

	if (pin == 0){
 14e:	81 11       	cpse	r24, r1
 150:	04 c0       	rjmp	.+8      	; 0x15a <ADC_Conversion+0xc>
		ADMUX = (1<<REFS0)|(0<<ADLAR)|(0 << MUX1)|(0 << MUX0); // ADC0
 152:	80 e4       	ldi	r24, 0x40	; 64
 154:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 158:	0b c0       	rjmp	.+22     	; 0x170 <ADC_Conversion+0x22>
	}
	else if(pin == 1){
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	21 f4       	brne	.+8      	; 0x166 <ADC_Conversion+0x18>
		ADMUX = (1<<REFS0)|(0<<ADLAR)|(0 << MUX1)|(1 << MUX0); // ADC1
 15e:	81 e4       	ldi	r24, 0x41	; 65
 160:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 164:	05 c0       	rjmp	.+10     	; 0x170 <ADC_Conversion+0x22>
	}
	else if (pin == 2){
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	89 f4       	brne	.+34     	; 0x18c <ADC_Conversion+0x3e>
		ADMUX = (1<<REFS0)|(0<<ADLAR)|(1 << MUX1)|(0 << MUX0); // ADC2  potensiometer
 16a:	82 e4       	ldi	r24, 0x42	; 66
 16c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	else {
		return 0;
		//Flag
	}
	
	ADCSRA |= (1<<ADSC);
 170:	ea e7       	ldi	r30, 0x7A	; 122
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	80 64       	ori	r24, 0x40	; 64
 178:	80 83       	st	Z, r24
	
	// vent på start-convertion (vent så lenge bittet e
	do {} while (ADCSRA & (1<<ADSC)); // ADCSRA & 0b0100 0000
 17a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 17e:	86 fd       	sbrc	r24, 6
 180:	fc cf       	rjmp	.-8      	; 0x17a <ADC_Conversion+0x2c>
	return ADC;
 182:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 186:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 18a:	08 95       	ret
	}
	else if (pin == 2){
		ADMUX = (1<<REFS0)|(0<<ADLAR)|(1 << MUX1)|(0 << MUX0); // ADC2  potensiometer
	}
	else {
		return 0;
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
	ADCSRA |= (1<<ADSC);
	
	// vent på start-convertion (vent så lenge bittet e
	do {} while (ADCSRA & (1<<ADSC)); // ADCSRA & 0b0100 0000
	return ADC;
}
 190:	08 95       	ret

00000192 <ADC_Init>:

void ADC_Init(void){
	ADCSRA = (1<<ADEN)|(0b111<<ADPS0);
 192:	87 e8       	ldi	r24, 0x87	; 135
 194:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 198:	08 95       	ret

0000019a <moveServo>:
}

//kjører servoen
void moveServo(uint8_t position){
	OCR1A = (((position*(SERVO_MAX - SERVO_MIN))/POSITION_MAX) + SERVO_MIN);
 19a:	28 2f       	mov	r18, r24
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	a4 e0       	ldi	r26, 0x04	; 4
 1a0:	b0 e1       	ldi	r27, 0x10	; 16
 1a2:	0e 94 15 02 	call	0x42a	; 0x42a <__umulhisi3>
 1a6:	24 eb       	ldi	r18, 0xB4	; 180
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	40 e0       	ldi	r20, 0x00	; 0
 1ac:	50 e0       	ldi	r21, 0x00	; 0
 1ae:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__udivmodsi4>
 1b2:	28 51       	subi	r18, 0x18	; 24
 1b4:	3c 4f       	sbci	r19, 0xFC	; 252
 1b6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1ba:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1be:	08 95       	ret

000001c0 <validatePosition>:
}



bool validatePosition(uint8_t position){     // gjør sånn at posisjonen til servo holder seg mellom 0-180 grader
	if (!(position <= 5 || position >= 180)){
 1c0:	86 50       	subi	r24, 0x06	; 6
 1c2:	8e 3a       	cpi	r24, 0xAE	; 174
 1c4:	10 f4       	brcc	.+4      	; 0x1ca <validatePosition+0xa>
		return true;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	08 95       	ret
	}
	else{
		return false;
 1ca:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 1cc:	08 95       	ret

000001ce <validateTolerance>:


bool validateTolerance(int16_t val1, int16_t val2){
	if((abs(val1-val2) <= 2) || (abs(val2-val1) <= 2)){
 1ce:	9c 01       	movw	r18, r24
 1d0:	26 1b       	sub	r18, r22
 1d2:	37 0b       	sbc	r19, r23
 1d4:	2e 5f       	subi	r18, 0xFE	; 254
 1d6:	3f 4f       	sbci	r19, 0xFF	; 255
 1d8:	25 30       	cpi	r18, 0x05	; 5
 1da:	31 05       	cpc	r19, r1
 1dc:	48 f0       	brcs	.+18     	; 0x1f0 <validateTolerance+0x22>
 1de:	68 1b       	sub	r22, r24
 1e0:	79 0b       	sbc	r23, r25
 1e2:	6e 5f       	subi	r22, 0xFE	; 254
 1e4:	7f 4f       	sbci	r23, 0xFF	; 255
 1e6:	65 30       	cpi	r22, 0x05	; 5
 1e8:	71 05       	cpc	r23, r1
 1ea:	20 f4       	brcc	.+8      	; 0x1f4 <validateTolerance+0x26>
		return false;
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	08 95       	ret
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	08 95       	ret
	}
	else{
		return true;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 1f6:	08 95       	ret

000001f8 <correctPosition>:


int correctPosition(int16_t potValue, int16_t leftSensor, int16_t rightSensor, uint8_t position){   //returnerer grader til servo
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	eb 01       	movw	r28, r22
 1fe:	fa 01       	movw	r30, r20
	
	potValue = (potValue+100)/200;
 200:	8c 59       	subi	r24, 0x9C	; 156
 202:	9f 4f       	sbci	r25, 0xFF	; 255
 204:	68 ec       	ldi	r22, 0xC8	; 200
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	0e 94 df 01 	call	0x3be	; 0x3be <__divmodhi4>
	
	if (leftSensor > rightSensor){     //Må finne ut av hvilken vei den skal være
 20c:	ec 17       	cp	r30, r28
 20e:	fd 07       	cpc	r31, r29
 210:	24 f4       	brge	.+8      	; 0x21a <correctPosition+0x22>
		return (position -= potValue);
 212:	26 1b       	sub	r18, r22
 214:	82 2f       	mov	r24, r18
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	09 c0       	rjmp	.+18     	; 0x22c <correctPosition+0x34>
	}
	else if (leftSensor < rightSensor){
 21a:	ce 17       	cp	r28, r30
 21c:	df 07       	cpc	r29, r31
 21e:	24 f4       	brge	.+8      	; 0x228 <correctPosition+0x30>
		return (position += potValue);
 220:	26 0f       	add	r18, r22
 222:	82 2f       	mov	r24, r18
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <correctPosition+0x34>
	}
	else{
		return 0;
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
	}
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <initUSART>:
void printByte(uint8_t byte) {
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
  transmitByte('0' + (byte % 10));                             /* Ones */
}
 232:	87 e6       	ldi	r24, 0x67	; 103
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 23a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 23e:	e0 ec       	ldi	r30, 0xC0	; 192
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	8d 7f       	andi	r24, 0xFD	; 253
 246:	80 83       	st	Z, r24
 248:	88 e1       	ldi	r24, 0x18	; 24
 24a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 24e:	86 e0       	ldi	r24, 0x06	; 6
 250:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 254:	08 95       	ret

00000256 <transmitByte>:
 256:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 25a:	95 ff       	sbrs	r25, 5
 25c:	fc cf       	rjmp	.-8      	; 0x256 <transmitByte>
 25e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 262:	08 95       	ret

00000264 <printString>:
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	8c 01       	movw	r16, r24
 26c:	c0 e0       	ldi	r28, 0x00	; 0
 26e:	03 c0       	rjmp	.+6      	; 0x276 <printString+0x12>
 270:	0e 94 2b 01 	call	0x256	; 0x256 <transmitByte>
 274:	cf 5f       	subi	r28, 0xFF	; 255
 276:	f8 01       	movw	r30, r16
 278:	ec 0f       	add	r30, r28
 27a:	f1 1d       	adc	r31, r1
 27c:	80 81       	ld	r24, Z
 27e:	81 11       	cpse	r24, r1
 280:	f7 cf       	rjmp	.-18     	; 0x270 <printString+0xc>
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	08 95       	ret

0000028a <printWord>:

void printWord(uint16_t word) {
 28a:	0f 93       	push	r16
 28c:	1f 93       	push	r17
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	8c 01       	movw	r16, r24
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
 294:	9c 01       	movw	r18, r24
 296:	36 95       	lsr	r19
 298:	27 95       	ror	r18
 29a:	36 95       	lsr	r19
 29c:	27 95       	ror	r18
 29e:	36 95       	lsr	r19
 2a0:	27 95       	ror	r18
 2a2:	a5 ec       	ldi	r26, 0xC5	; 197
 2a4:	b0 e2       	ldi	r27, 0x20	; 32
 2a6:	0e 94 15 02 	call	0x42a	; 0x42a <__umulhisi3>
 2aa:	ac 01       	movw	r20, r24
 2ac:	52 95       	swap	r21
 2ae:	42 95       	swap	r20
 2b0:	4f 70       	andi	r20, 0x0F	; 15
 2b2:	45 27       	eor	r20, r21
 2b4:	5f 70       	andi	r21, 0x0F	; 15
 2b6:	45 27       	eor	r20, r21
 2b8:	9a 01       	movw	r18, r20
 2ba:	ad ec       	ldi	r26, 0xCD	; 205
 2bc:	bc ec       	ldi	r27, 0xCC	; 204
 2be:	0e 94 15 02 	call	0x42a	; 0x42a <__umulhisi3>
 2c2:	96 95       	lsr	r25
 2c4:	87 95       	ror	r24
 2c6:	96 95       	lsr	r25
 2c8:	87 95       	ror	r24
 2ca:	96 95       	lsr	r25
 2cc:	87 95       	ror	r24
 2ce:	9c 01       	movw	r18, r24
 2d0:	22 0f       	add	r18, r18
 2d2:	33 1f       	adc	r19, r19
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	82 0f       	add	r24, r18
 2e2:	93 1f       	adc	r25, r19
 2e4:	9a 01       	movw	r18, r20
 2e6:	28 1b       	sub	r18, r24
 2e8:	39 0b       	sbc	r19, r25
 2ea:	c9 01       	movw	r24, r18
 2ec:	80 5d       	subi	r24, 0xD0	; 208
 2ee:	0e 94 2b 01 	call	0x256	; 0x256 <transmitByte>
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
 2f2:	98 01       	movw	r18, r16
 2f4:	36 95       	lsr	r19
 2f6:	27 95       	ror	r18
 2f8:	36 95       	lsr	r19
 2fa:	27 95       	ror	r18
 2fc:	ab e7       	ldi	r26, 0x7B	; 123
 2fe:	b4 e1       	ldi	r27, 0x14	; 20
 300:	0e 94 15 02 	call	0x42a	; 0x42a <__umulhisi3>
 304:	ac 01       	movw	r20, r24
 306:	56 95       	lsr	r21
 308:	47 95       	ror	r20
 30a:	9a 01       	movw	r18, r20
 30c:	ad ec       	ldi	r26, 0xCD	; 205
 30e:	bc ec       	ldi	r27, 0xCC	; 204
 310:	0e 94 15 02 	call	0x42a	; 0x42a <__umulhisi3>
 314:	96 95       	lsr	r25
 316:	87 95       	ror	r24
 318:	96 95       	lsr	r25
 31a:	87 95       	ror	r24
 31c:	96 95       	lsr	r25
 31e:	87 95       	ror	r24
 320:	9c 01       	movw	r18, r24
 322:	22 0f       	add	r18, r18
 324:	33 1f       	adc	r19, r19
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	82 0f       	add	r24, r18
 334:	93 1f       	adc	r25, r19
 336:	9a 01       	movw	r18, r20
 338:	28 1b       	sub	r18, r24
 33a:	39 0b       	sbc	r19, r25
 33c:	c9 01       	movw	r24, r18
 33e:	80 5d       	subi	r24, 0xD0	; 208
 340:	0e 94 2b 01 	call	0x256	; 0x256 <transmitByte>
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 344:	98 01       	movw	r18, r16
 346:	ad ec       	ldi	r26, 0xCD	; 205
 348:	bc ec       	ldi	r27, 0xCC	; 204
 34a:	0e 94 15 02 	call	0x42a	; 0x42a <__umulhisi3>
 34e:	ec 01       	movw	r28, r24
 350:	d6 95       	lsr	r29
 352:	c7 95       	ror	r28
 354:	d6 95       	lsr	r29
 356:	c7 95       	ror	r28
 358:	d6 95       	lsr	r29
 35a:	c7 95       	ror	r28
 35c:	9e 01       	movw	r18, r28
 35e:	0e 94 15 02 	call	0x42a	; 0x42a <__umulhisi3>
 362:	96 95       	lsr	r25
 364:	87 95       	ror	r24
 366:	96 95       	lsr	r25
 368:	87 95       	ror	r24
 36a:	96 95       	lsr	r25
 36c:	87 95       	ror	r24
 36e:	9c 01       	movw	r18, r24
 370:	22 0f       	add	r18, r18
 372:	33 1f       	adc	r19, r19
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	82 0f       	add	r24, r18
 382:	93 1f       	adc	r25, r19
 384:	9e 01       	movw	r18, r28
 386:	28 1b       	sub	r18, r24
 388:	39 0b       	sbc	r19, r25
 38a:	c9 01       	movw	r24, r18
 38c:	80 5d       	subi	r24, 0xD0	; 208
 38e:	0e 94 2b 01 	call	0x256	; 0x256 <transmitByte>
  transmitByte('0' + (word % 10));                             /* Ones */
 392:	ce 01       	movw	r24, r28
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	cc 0f       	add	r28, r28
 39a:	dd 1f       	adc	r29, r29
 39c:	cc 0f       	add	r28, r28
 39e:	dd 1f       	adc	r29, r29
 3a0:	cc 0f       	add	r28, r28
 3a2:	dd 1f       	adc	r29, r29
 3a4:	c8 0f       	add	r28, r24
 3a6:	d9 1f       	adc	r29, r25
 3a8:	c8 01       	movw	r24, r16
 3aa:	8c 1b       	sub	r24, r28
 3ac:	9d 0b       	sbc	r25, r29
 3ae:	80 5d       	subi	r24, 0xD0	; 208
 3b0:	0e 94 2b 01 	call	0x256	; 0x256 <transmitByte>
}
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	1f 91       	pop	r17
 3ba:	0f 91       	pop	r16
 3bc:	08 95       	ret

000003be <__divmodhi4>:
 3be:	97 fb       	bst	r25, 7
 3c0:	07 2e       	mov	r0, r23
 3c2:	16 f4       	brtc	.+4      	; 0x3c8 <__divmodhi4+0xa>
 3c4:	00 94       	com	r0
 3c6:	07 d0       	rcall	.+14     	; 0x3d6 <__divmodhi4_neg1>
 3c8:	77 fd       	sbrc	r23, 7
 3ca:	09 d0       	rcall	.+18     	; 0x3de <__divmodhi4_neg2>
 3cc:	0e 94 24 02 	call	0x448	; 0x448 <__udivmodhi4>
 3d0:	07 fc       	sbrc	r0, 7
 3d2:	05 d0       	rcall	.+10     	; 0x3de <__divmodhi4_neg2>
 3d4:	3e f4       	brtc	.+14     	; 0x3e4 <__divmodhi4_exit>

000003d6 <__divmodhi4_neg1>:
 3d6:	90 95       	com	r25
 3d8:	81 95       	neg	r24
 3da:	9f 4f       	sbci	r25, 0xFF	; 255
 3dc:	08 95       	ret

000003de <__divmodhi4_neg2>:
 3de:	70 95       	com	r23
 3e0:	61 95       	neg	r22
 3e2:	7f 4f       	sbci	r23, 0xFF	; 255

000003e4 <__divmodhi4_exit>:
 3e4:	08 95       	ret

000003e6 <__udivmodsi4>:
 3e6:	a1 e2       	ldi	r26, 0x21	; 33
 3e8:	1a 2e       	mov	r1, r26
 3ea:	aa 1b       	sub	r26, r26
 3ec:	bb 1b       	sub	r27, r27
 3ee:	fd 01       	movw	r30, r26
 3f0:	0d c0       	rjmp	.+26     	; 0x40c <__udivmodsi4_ep>

000003f2 <__udivmodsi4_loop>:
 3f2:	aa 1f       	adc	r26, r26
 3f4:	bb 1f       	adc	r27, r27
 3f6:	ee 1f       	adc	r30, r30
 3f8:	ff 1f       	adc	r31, r31
 3fa:	a2 17       	cp	r26, r18
 3fc:	b3 07       	cpc	r27, r19
 3fe:	e4 07       	cpc	r30, r20
 400:	f5 07       	cpc	r31, r21
 402:	20 f0       	brcs	.+8      	; 0x40c <__udivmodsi4_ep>
 404:	a2 1b       	sub	r26, r18
 406:	b3 0b       	sbc	r27, r19
 408:	e4 0b       	sbc	r30, r20
 40a:	f5 0b       	sbc	r31, r21

0000040c <__udivmodsi4_ep>:
 40c:	66 1f       	adc	r22, r22
 40e:	77 1f       	adc	r23, r23
 410:	88 1f       	adc	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	1a 94       	dec	r1
 416:	69 f7       	brne	.-38     	; 0x3f2 <__udivmodsi4_loop>
 418:	60 95       	com	r22
 41a:	70 95       	com	r23
 41c:	80 95       	com	r24
 41e:	90 95       	com	r25
 420:	9b 01       	movw	r18, r22
 422:	ac 01       	movw	r20, r24
 424:	bd 01       	movw	r22, r26
 426:	cf 01       	movw	r24, r30
 428:	08 95       	ret

0000042a <__umulhisi3>:
 42a:	a2 9f       	mul	r26, r18
 42c:	b0 01       	movw	r22, r0
 42e:	b3 9f       	mul	r27, r19
 430:	c0 01       	movw	r24, r0
 432:	a3 9f       	mul	r26, r19
 434:	70 0d       	add	r23, r0
 436:	81 1d       	adc	r24, r1
 438:	11 24       	eor	r1, r1
 43a:	91 1d       	adc	r25, r1
 43c:	b2 9f       	mul	r27, r18
 43e:	70 0d       	add	r23, r0
 440:	81 1d       	adc	r24, r1
 442:	11 24       	eor	r1, r1
 444:	91 1d       	adc	r25, r1
 446:	08 95       	ret

00000448 <__udivmodhi4>:
 448:	aa 1b       	sub	r26, r26
 44a:	bb 1b       	sub	r27, r27
 44c:	51 e1       	ldi	r21, 0x11	; 17
 44e:	07 c0       	rjmp	.+14     	; 0x45e <__udivmodhi4_ep>

00000450 <__udivmodhi4_loop>:
 450:	aa 1f       	adc	r26, r26
 452:	bb 1f       	adc	r27, r27
 454:	a6 17       	cp	r26, r22
 456:	b7 07       	cpc	r27, r23
 458:	10 f0       	brcs	.+4      	; 0x45e <__udivmodhi4_ep>
 45a:	a6 1b       	sub	r26, r22
 45c:	b7 0b       	sbc	r27, r23

0000045e <__udivmodhi4_ep>:
 45e:	88 1f       	adc	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	5a 95       	dec	r21
 464:	a9 f7       	brne	.-22     	; 0x450 <__udivmodhi4_loop>
 466:	80 95       	com	r24
 468:	90 95       	com	r25
 46a:	bc 01       	movw	r22, r24
 46c:	cd 01       	movw	r24, r26
 46e:	08 95       	ret

00000470 <_exit>:
 470:	f8 94       	cli

00000472 <__stop_program>:
 472:	ff cf       	rjmp	.-2      	; 0x472 <__stop_program>
