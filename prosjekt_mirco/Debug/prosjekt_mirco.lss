
prosjekt_mirco.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00000568  000005fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000568  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800150  00800150  0000064c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000067c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eef  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d4  00000000  00000000  000016a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000077f  00000000  00000000  00001f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  000026f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000546  00000000  00000000  00002968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c4  00000000  00000000  00002eae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003672  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 35       	cpi	r26, 0x50	; 80
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e5       	ldi	r26, 0x50	; 80
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 35       	cpi	r26, 0x56	; 86
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  9e:	0c 94 b2 02 	jmp	0x564	; 0x564 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <readPin>:
uint16_t lightSensor1;
uint16_t lightSensor2;


void readPin(int pin){
	printWord(pin);
  a6:	0e 94 bf 01 	call	0x37e	; 0x37e <printWord>
	printString("\r\n");
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	0e 94 ac 01 	call	0x358	; 0x358 <printString>
  b2:	08 95       	ret

000000b4 <__vector_1>:
}

ISR(INT0_vect) {
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	ef 93       	push	r30
  d4:	ff 93       	push	r31
	if (bit_is_clear(PIND, PD2)) {
  d6:	4a 99       	sbic	0x09, 2	; 9
  d8:	27 c0       	rjmp	.+78     	; 0x128 <__vector_1+0x74>
		printString("Poteniometer value: ");
  da:	84 e0       	ldi	r24, 0x04	; 4
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	0e 94 ac 01 	call	0x358	; 0x358 <printString>
		readPin(potMeter);
  e2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
  e6:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <__data_end+0x1>
  ea:	0e 94 53 00 	call	0xa6	; 0xa6 <readPin>
		printString("Lightsensor 1 value: ");
  ee:	89 e1       	ldi	r24, 0x19	; 25
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	0e 94 ac 01 	call	0x358	; 0x358 <printString>
		readPin(lightSensor1);
  f6:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <lightSensor1>
  fa:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <lightSensor1+0x1>
  fe:	0e 94 53 00 	call	0xa6	; 0xa6 <readPin>
		printString("Lightsensor 2 value: ");
 102:	8f e2       	ldi	r24, 0x2F	; 47
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	0e 94 ac 01 	call	0x358	; 0x358 <printString>
		readPin(lightSensor2);
 10a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <lightSensor2>
 10e:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <lightSensor2+0x1>
 112:	0e 94 53 00 	call	0xa6	; 0xa6 <readPin>
		printString("Position: ");
 116:	85 e4       	ldi	r24, 0x45	; 69
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	0e 94 ac 01 	call	0x358	; 0x358 <printString>
		readPin(position);
 11e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 53 00 	call	0xa6	; 0xa6 <readPin>
	}
	else{
	}
}
 128:	ff 91       	pop	r31
 12a:	ef 91       	pop	r30
 12c:	bf 91       	pop	r27
 12e:	af 91       	pop	r26
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	7f 91       	pop	r23
 136:	6f 91       	pop	r22
 138:	5f 91       	pop	r21
 13a:	4f 91       	pop	r20
 13c:	3f 91       	pop	r19
 13e:	2f 91       	pop	r18
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <initInterrupt0>:

void initInterrupt0(void) {
	PORTD |= (1 << PD2);    // pull up
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	84 60       	ori	r24, 0x04	; 4
 14e:	8b b9       	out	0x0b, r24	; 11
	EIMSK |= (1 << INT0);                                 /* enable INT0 */
 150:	8d b3       	in	r24, 0x1d	; 29
 152:	81 60       	ori	r24, 0x01	; 1
 154:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1 << ISC00);                /* trigger when button changes */
 156:	e9 e6       	ldi	r30, 0x69	; 105
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	80 83       	st	Z, r24
	sei();                          /* set (global) interrupt enable bit */
 160:	78 94       	sei
 162:	08 95       	ret

00000164 <main>:
}

int main(void) {
	
	UBRR0 = BAUD_PRESCALE;
 164:	87 e6       	ldi	r24, 0x67	; 103
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 16c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 170:	88 e1       	ldi	r24, 0x18	; 24
 172:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// ------- Inits -------- //
	initUSART();
 176:	0e 94 93 01 	call	0x326	; 0x326 <initUSART>
	ADC_Init();
 17a:	0e 94 3b 01 	call	0x276	; 0x276 <ADC_Init>
	Timer1_PWM_init();
 17e:	0e 94 0a 01 	call	0x214	; 0x214 <Timer1_PWM_init>
	initInterrupt0();
 182:	0e 94 a5 00 	call	0x14a	; 0x14a <initInterrupt0>
	
	
	// ------- Handler -------- //
	do{
		
		lightSensor1 = ADC_Conversion(0);
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 19 01 	call	0x232	; 0x232 <ADC_Conversion>
 18c:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <lightSensor1+0x1>
 190:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <lightSensor1>
		lightSensor2 = ADC_Conversion(1);
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 19 01 	call	0x232	; 0x232 <ADC_Conversion>
 19a:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <lightSensor2+0x1>
 19e:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <lightSensor2>
		potMeter = ADC_Conversion(2);
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 19 01 	call	0x232	; 0x232 <ADC_Conversion>
 1a8:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <__data_end+0x1>
 1ac:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>

		position = correctPosition(potMeter, lightSensor1, lightSensor2, position);
 1b0:	40 91 54 01 	lds	r20, 0x0154	; 0x800154 <lightSensor2>
 1b4:	50 91 55 01 	lds	r21, 0x0155	; 0x800155 <lightSensor2+0x1>
 1b8:	60 91 52 01 	lds	r22, 0x0152	; 0x800152 <lightSensor1>
 1bc:	70 91 53 01 	lds	r23, 0x0153	; 0x800153 <lightSensor1+0x1>
 1c0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c4:	0e 94 76 01 	call	0x2ec	; 0x2ec <correctPosition>
 1c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		if (validatePosition(position) && validateTolerance(lightSensor1, lightSensor2)){
 1cc:	0e 94 52 01 	call	0x2a4	; 0x2a4 <validatePosition>
 1d0:	88 23       	and	r24, r24
 1d2:	89 f0       	breq	.+34     	; 0x1f6 <main+0x92>
 1d4:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <lightSensor2>
 1d8:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <lightSensor2+0x1>
 1dc:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <lightSensor1>
 1e0:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <lightSensor1+0x1>
 1e4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <validateTolerance>
 1e8:	88 23       	and	r24, r24
 1ea:	29 f0       	breq	.+10     	; 0x1f6 <main+0x92>
			moveServo(position);
 1ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f0:	0e 94 3f 01 	call	0x27e	; 0x27e <moveServo>
 1f4:	c8 cf       	rjmp	.-112    	; 0x186 <main+0x22>
		}
		else if (position > 180){
 1f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1fa:	85 3b       	cpi	r24, 0xB5	; 181
 1fc:	20 f0       	brcs	.+8      	; 0x206 <main+0xa2>
			position = 180;
 1fe:	84 eb       	ldi	r24, 0xB4	; 180
 200:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 204:	c0 cf       	rjmp	.-128    	; 0x186 <main+0x22>
		}
		else if (position < 5){
 206:	85 30       	cpi	r24, 0x05	; 5
 208:	08 f0       	brcs	.+2      	; 0x20c <main+0xa8>
 20a:	bd cf       	rjmp	.-134    	; 0x186 <main+0x22>
			position = 1;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 212:	b9 cf       	rjmp	.-142    	; 0x186 <main+0x22>

00000214 <Timer1_PWM_init>:
#define POSITION_MAX 180

//Timer initialization
void Timer1_PWM_init(){
	
	DDRB = (1<<DDB1); // Setter PB1 som output. (pin 9)
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	84 b9       	out	0x04, r24	; 4

	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(1<<WGM11)|(0<<WGM10);
 218:	82 e8       	ldi	r24, 0x82	; 130
 21a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>

	TCCR1B = (1<<CS11)|(1<<WGM13)|(1<<WGM12);
 21e:	8a e1       	ldi	r24, 0x1A	; 26
 220:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	ICR1 = SERVO_PERIOD; // Periodetid på 20ms (50Hz)
 224:	80 e4       	ldi	r24, 0x40	; 64
 226:	9c e9       	ldi	r25, 0x9C	; 156
 228:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 22c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 230:	08 95       	ret

00000232 <ADC_Conversion>:


//ADC
int ADC_Conversion(int8_t pin){

	if (pin == 0){
 232:	81 11       	cpse	r24, r1
 234:	04 c0       	rjmp	.+8      	; 0x23e <ADC_Conversion+0xc>
		ADMUX = (1<<REFS0)|(0<<ADLAR)|(0 << MUX1)|(0 << MUX0); // ADC0
 236:	80 e4       	ldi	r24, 0x40	; 64
 238:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 23c:	0b c0       	rjmp	.+22     	; 0x254 <ADC_Conversion+0x22>
	}
	else if(pin == 1){
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	21 f4       	brne	.+8      	; 0x24a <ADC_Conversion+0x18>
		ADMUX = (1<<REFS0)|(0<<ADLAR)|(0 << MUX1)|(1 << MUX0); // ADC1
 242:	81 e4       	ldi	r24, 0x41	; 65
 244:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 248:	05 c0       	rjmp	.+10     	; 0x254 <ADC_Conversion+0x22>
	}
	else if (pin == 2){
 24a:	82 30       	cpi	r24, 0x02	; 2
 24c:	89 f4       	brne	.+34     	; 0x270 <ADC_Conversion+0x3e>
		ADMUX = (1<<REFS0)|(0<<ADLAR)|(1 << MUX1)|(0 << MUX0); // ADC2  potensiometer
 24e:	82 e4       	ldi	r24, 0x42	; 66
 250:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	}
	else {
		return 0;
	}
	
	ADCSRA |= (1<<ADSC);
 254:	ea e7       	ldi	r30, 0x7A	; 122
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	80 64       	ori	r24, 0x40	; 64
 25c:	80 83       	st	Z, r24
	
	do {} while (ADCSRA & (1<<ADSC)); // vent på start-convertion (vent så lenge bittet er høy)
 25e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 262:	86 fd       	sbrc	r24, 6
 264:	fc cf       	rjmp	.-8      	; 0x25e <ADC_Conversion+0x2c>
	return ADC;
 266:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 26a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 26e:	08 95       	ret
	}
	else if (pin == 2){
		ADMUX = (1<<REFS0)|(0<<ADLAR)|(1 << MUX1)|(0 << MUX0); // ADC2  potensiometer
	}
	else {
		return 0;
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
	
	ADCSRA |= (1<<ADSC);
	
	do {} while (ADCSRA & (1<<ADSC)); // vent på start-convertion (vent så lenge bittet er høy)
	return ADC;
}
 274:	08 95       	ret

00000276 <ADC_Init>:

void ADC_Init(void){
	ADCSRA = (1<<ADEN)|(0b111<<ADPS0);
 276:	87 e8       	ldi	r24, 0x87	; 135
 278:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 27c:	08 95       	ret

0000027e <moveServo>:
}

//kjører servoen
void moveServo(uint8_t position){
	OCR1A = (((position*(SERVO_MAX - SERVO_MIN))/POSITION_MAX) + SERVO_MIN);
 27e:	28 2f       	mov	r18, r24
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	a4 e0       	ldi	r26, 0x04	; 4
 284:	b0 e1       	ldi	r27, 0x10	; 16
 286:	0e 94 8f 02 	call	0x51e	; 0x51e <__umulhisi3>
 28a:	24 eb       	ldi	r18, 0xB4	; 180
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	40 e0       	ldi	r20, 0x00	; 0
 290:	50 e0       	ldi	r21, 0x00	; 0
 292:	0e 94 6d 02 	call	0x4da	; 0x4da <__udivmodsi4>
 296:	28 51       	subi	r18, 0x18	; 24
 298:	3c 4f       	sbci	r19, 0xFC	; 252
 29a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 29e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 2a2:	08 95       	ret

000002a4 <validatePosition>:
}



bool validatePosition(uint8_t position){     // gjør sånn at posisjonen til servo holder seg mellom 0-180 grader
	if (!(position <= 5 || position >= 180)){
 2a4:	86 50       	subi	r24, 0x06	; 6
 2a6:	8e 3a       	cpi	r24, 0xAE	; 174
 2a8:	10 f4       	brcc	.+4      	; 0x2ae <validatePosition+0xa>
		return true;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	08 95       	ret
	}
	else{
		return false;
 2ae:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 2b0:	08 95       	ret

000002b2 <validateTolerance>:


bool validateTolerance(int16_t val1, int16_t val2){
	int tolleranse = 5;
	
	if((abs(val1-val2) <= tolleranse) || (abs(val2-val1) <= tolleranse)){
 2b2:	ac 01       	movw	r20, r24
 2b4:	46 1b       	sub	r20, r22
 2b6:	57 0b       	sbc	r21, r23
 2b8:	9a 01       	movw	r18, r20
 2ba:	22 f4       	brpl	.+8      	; 0x2c4 <validateTolerance+0x12>
 2bc:	22 27       	eor	r18, r18
 2be:	33 27       	eor	r19, r19
 2c0:	24 1b       	sub	r18, r20
 2c2:	35 0b       	sbc	r19, r21
 2c4:	26 30       	cpi	r18, 0x06	; 6
 2c6:	31 05       	cpc	r19, r1
 2c8:	6c f0       	brlt	.+26     	; 0x2e4 <validateTolerance+0x32>
 2ca:	68 1b       	sub	r22, r24
 2cc:	79 0b       	sbc	r23, r25
 2ce:	cb 01       	movw	r24, r22
 2d0:	99 23       	and	r25, r25
 2d2:	24 f4       	brge	.+8      	; 0x2dc <validateTolerance+0x2a>
 2d4:	88 27       	eor	r24, r24
 2d6:	99 27       	eor	r25, r25
 2d8:	86 1b       	sub	r24, r22
 2da:	97 0b       	sbc	r25, r23
 2dc:	06 97       	sbiw	r24, 0x06	; 6
 2de:	24 f4       	brge	.+8      	; 0x2e8 <validateTolerance+0x36>
		return false;
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	08 95       	ret
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	08 95       	ret
	}
	else{
		return true;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 2ea:	08 95       	ret

000002ec <correctPosition>:


int correctPosition(int16_t potValue, int16_t leftSensor, int16_t rightSensor, uint8_t position){   //returnerer grader til servo
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	eb 01       	movw	r28, r22
 2f2:	fa 01       	movw	r30, r20
	
	potValue = (potValue+100)/200;
 2f4:	8c 59       	subi	r24, 0x9C	; 156
 2f6:	9f 4f       	sbci	r25, 0xFF	; 255
 2f8:	68 ec       	ldi	r22, 0xC8	; 200
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__divmodhi4>
	
	if (leftSensor > rightSensor){     //Må finne ut av hvilken vei den skal være
 300:	ec 17       	cp	r30, r28
 302:	fd 07       	cpc	r31, r29
 304:	24 f4       	brge	.+8      	; 0x30e <correctPosition+0x22>
		return (position -= potValue);
 306:	26 1b       	sub	r18, r22
 308:	82 2f       	mov	r24, r18
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	09 c0       	rjmp	.+18     	; 0x320 <correctPosition+0x34>
	}
	else if (leftSensor < rightSensor){
 30e:	ce 17       	cp	r28, r30
 310:	df 07       	cpc	r29, r31
 312:	24 f4       	brge	.+8      	; 0x31c <correctPosition+0x30>
		return (position += potValue);
 314:	26 0f       	add	r18, r22
 316:	82 2f       	mov	r24, r18
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <correctPosition+0x34>
	}
	else{
		return 0;
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	90 e0       	ldi	r25, 0x00	; 0
	}
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <initUSART>:
void printByte(uint8_t byte) {
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
  transmitByte('0' + (byte % 10));                             /* Ones */
}
 326:	87 e6       	ldi	r24, 0x67	; 103
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 32e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 332:	e0 ec       	ldi	r30, 0xC0	; 192
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	8d 7f       	andi	r24, 0xFD	; 253
 33a:	80 83       	st	Z, r24
 33c:	88 e1       	ldi	r24, 0x18	; 24
 33e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 342:	86 e0       	ldi	r24, 0x06	; 6
 344:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 348:	08 95       	ret

0000034a <transmitByte>:
 34a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 34e:	95 ff       	sbrs	r25, 5
 350:	fc cf       	rjmp	.-8      	; 0x34a <transmitByte>
 352:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 356:	08 95       	ret

00000358 <printString>:
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	cf 93       	push	r28
 35e:	8c 01       	movw	r16, r24
 360:	c0 e0       	ldi	r28, 0x00	; 0
 362:	03 c0       	rjmp	.+6      	; 0x36a <printString+0x12>
 364:	0e 94 a5 01 	call	0x34a	; 0x34a <transmitByte>
 368:	cf 5f       	subi	r28, 0xFF	; 255
 36a:	f8 01       	movw	r30, r16
 36c:	ec 0f       	add	r30, r28
 36e:	f1 1d       	adc	r31, r1
 370:	80 81       	ld	r24, Z
 372:	81 11       	cpse	r24, r1
 374:	f7 cf       	rjmp	.-18     	; 0x364 <printString+0xc>
 376:	cf 91       	pop	r28
 378:	1f 91       	pop	r17
 37a:	0f 91       	pop	r16
 37c:	08 95       	ret

0000037e <printWord>:

void printWord(uint16_t word) {
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	8c 01       	movw	r16, r24
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
 388:	9c 01       	movw	r18, r24
 38a:	36 95       	lsr	r19
 38c:	27 95       	ror	r18
 38e:	36 95       	lsr	r19
 390:	27 95       	ror	r18
 392:	36 95       	lsr	r19
 394:	27 95       	ror	r18
 396:	a5 ec       	ldi	r26, 0xC5	; 197
 398:	b0 e2       	ldi	r27, 0x20	; 32
 39a:	0e 94 8f 02 	call	0x51e	; 0x51e <__umulhisi3>
 39e:	ac 01       	movw	r20, r24
 3a0:	52 95       	swap	r21
 3a2:	42 95       	swap	r20
 3a4:	4f 70       	andi	r20, 0x0F	; 15
 3a6:	45 27       	eor	r20, r21
 3a8:	5f 70       	andi	r21, 0x0F	; 15
 3aa:	45 27       	eor	r20, r21
 3ac:	9a 01       	movw	r18, r20
 3ae:	ad ec       	ldi	r26, 0xCD	; 205
 3b0:	bc ec       	ldi	r27, 0xCC	; 204
 3b2:	0e 94 8f 02 	call	0x51e	; 0x51e <__umulhisi3>
 3b6:	96 95       	lsr	r25
 3b8:	87 95       	ror	r24
 3ba:	96 95       	lsr	r25
 3bc:	87 95       	ror	r24
 3be:	96 95       	lsr	r25
 3c0:	87 95       	ror	r24
 3c2:	9c 01       	movw	r18, r24
 3c4:	22 0f       	add	r18, r18
 3c6:	33 1f       	adc	r19, r19
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	82 0f       	add	r24, r18
 3d6:	93 1f       	adc	r25, r19
 3d8:	9a 01       	movw	r18, r20
 3da:	28 1b       	sub	r18, r24
 3dc:	39 0b       	sbc	r19, r25
 3de:	c9 01       	movw	r24, r18
 3e0:	80 5d       	subi	r24, 0xD0	; 208
 3e2:	0e 94 a5 01 	call	0x34a	; 0x34a <transmitByte>
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
 3e6:	98 01       	movw	r18, r16
 3e8:	36 95       	lsr	r19
 3ea:	27 95       	ror	r18
 3ec:	36 95       	lsr	r19
 3ee:	27 95       	ror	r18
 3f0:	ab e7       	ldi	r26, 0x7B	; 123
 3f2:	b4 e1       	ldi	r27, 0x14	; 20
 3f4:	0e 94 8f 02 	call	0x51e	; 0x51e <__umulhisi3>
 3f8:	ac 01       	movw	r20, r24
 3fa:	56 95       	lsr	r21
 3fc:	47 95       	ror	r20
 3fe:	9a 01       	movw	r18, r20
 400:	ad ec       	ldi	r26, 0xCD	; 205
 402:	bc ec       	ldi	r27, 0xCC	; 204
 404:	0e 94 8f 02 	call	0x51e	; 0x51e <__umulhisi3>
 408:	96 95       	lsr	r25
 40a:	87 95       	ror	r24
 40c:	96 95       	lsr	r25
 40e:	87 95       	ror	r24
 410:	96 95       	lsr	r25
 412:	87 95       	ror	r24
 414:	9c 01       	movw	r18, r24
 416:	22 0f       	add	r18, r18
 418:	33 1f       	adc	r19, r19
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	82 0f       	add	r24, r18
 428:	93 1f       	adc	r25, r19
 42a:	9a 01       	movw	r18, r20
 42c:	28 1b       	sub	r18, r24
 42e:	39 0b       	sbc	r19, r25
 430:	c9 01       	movw	r24, r18
 432:	80 5d       	subi	r24, 0xD0	; 208
 434:	0e 94 a5 01 	call	0x34a	; 0x34a <transmitByte>
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 438:	98 01       	movw	r18, r16
 43a:	ad ec       	ldi	r26, 0xCD	; 205
 43c:	bc ec       	ldi	r27, 0xCC	; 204
 43e:	0e 94 8f 02 	call	0x51e	; 0x51e <__umulhisi3>
 442:	ec 01       	movw	r28, r24
 444:	d6 95       	lsr	r29
 446:	c7 95       	ror	r28
 448:	d6 95       	lsr	r29
 44a:	c7 95       	ror	r28
 44c:	d6 95       	lsr	r29
 44e:	c7 95       	ror	r28
 450:	9e 01       	movw	r18, r28
 452:	0e 94 8f 02 	call	0x51e	; 0x51e <__umulhisi3>
 456:	96 95       	lsr	r25
 458:	87 95       	ror	r24
 45a:	96 95       	lsr	r25
 45c:	87 95       	ror	r24
 45e:	96 95       	lsr	r25
 460:	87 95       	ror	r24
 462:	9c 01       	movw	r18, r24
 464:	22 0f       	add	r18, r18
 466:	33 1f       	adc	r19, r19
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	82 0f       	add	r24, r18
 476:	93 1f       	adc	r25, r19
 478:	9e 01       	movw	r18, r28
 47a:	28 1b       	sub	r18, r24
 47c:	39 0b       	sbc	r19, r25
 47e:	c9 01       	movw	r24, r18
 480:	80 5d       	subi	r24, 0xD0	; 208
 482:	0e 94 a5 01 	call	0x34a	; 0x34a <transmitByte>
  transmitByte('0' + (word % 10));                             /* Ones */
 486:	ce 01       	movw	r24, r28
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	cc 0f       	add	r28, r28
 48e:	dd 1f       	adc	r29, r29
 490:	cc 0f       	add	r28, r28
 492:	dd 1f       	adc	r29, r29
 494:	cc 0f       	add	r28, r28
 496:	dd 1f       	adc	r29, r29
 498:	c8 0f       	add	r28, r24
 49a:	d9 1f       	adc	r29, r25
 49c:	c8 01       	movw	r24, r16
 49e:	8c 1b       	sub	r24, r28
 4a0:	9d 0b       	sbc	r25, r29
 4a2:	80 5d       	subi	r24, 0xD0	; 208
 4a4:	0e 94 a5 01 	call	0x34a	; 0x34a <transmitByte>
}
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	1f 91       	pop	r17
 4ae:	0f 91       	pop	r16
 4b0:	08 95       	ret

000004b2 <__divmodhi4>:
 4b2:	97 fb       	bst	r25, 7
 4b4:	07 2e       	mov	r0, r23
 4b6:	16 f4       	brtc	.+4      	; 0x4bc <__divmodhi4+0xa>
 4b8:	00 94       	com	r0
 4ba:	07 d0       	rcall	.+14     	; 0x4ca <__divmodhi4_neg1>
 4bc:	77 fd       	sbrc	r23, 7
 4be:	09 d0       	rcall	.+18     	; 0x4d2 <__divmodhi4_neg2>
 4c0:	0e 94 9e 02 	call	0x53c	; 0x53c <__udivmodhi4>
 4c4:	07 fc       	sbrc	r0, 7
 4c6:	05 d0       	rcall	.+10     	; 0x4d2 <__divmodhi4_neg2>
 4c8:	3e f4       	brtc	.+14     	; 0x4d8 <__divmodhi4_exit>

000004ca <__divmodhi4_neg1>:
 4ca:	90 95       	com	r25
 4cc:	81 95       	neg	r24
 4ce:	9f 4f       	sbci	r25, 0xFF	; 255
 4d0:	08 95       	ret

000004d2 <__divmodhi4_neg2>:
 4d2:	70 95       	com	r23
 4d4:	61 95       	neg	r22
 4d6:	7f 4f       	sbci	r23, 0xFF	; 255

000004d8 <__divmodhi4_exit>:
 4d8:	08 95       	ret

000004da <__udivmodsi4>:
 4da:	a1 e2       	ldi	r26, 0x21	; 33
 4dc:	1a 2e       	mov	r1, r26
 4de:	aa 1b       	sub	r26, r26
 4e0:	bb 1b       	sub	r27, r27
 4e2:	fd 01       	movw	r30, r26
 4e4:	0d c0       	rjmp	.+26     	; 0x500 <__udivmodsi4_ep>

000004e6 <__udivmodsi4_loop>:
 4e6:	aa 1f       	adc	r26, r26
 4e8:	bb 1f       	adc	r27, r27
 4ea:	ee 1f       	adc	r30, r30
 4ec:	ff 1f       	adc	r31, r31
 4ee:	a2 17       	cp	r26, r18
 4f0:	b3 07       	cpc	r27, r19
 4f2:	e4 07       	cpc	r30, r20
 4f4:	f5 07       	cpc	r31, r21
 4f6:	20 f0       	brcs	.+8      	; 0x500 <__udivmodsi4_ep>
 4f8:	a2 1b       	sub	r26, r18
 4fa:	b3 0b       	sbc	r27, r19
 4fc:	e4 0b       	sbc	r30, r20
 4fe:	f5 0b       	sbc	r31, r21

00000500 <__udivmodsi4_ep>:
 500:	66 1f       	adc	r22, r22
 502:	77 1f       	adc	r23, r23
 504:	88 1f       	adc	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	1a 94       	dec	r1
 50a:	69 f7       	brne	.-38     	; 0x4e6 <__udivmodsi4_loop>
 50c:	60 95       	com	r22
 50e:	70 95       	com	r23
 510:	80 95       	com	r24
 512:	90 95       	com	r25
 514:	9b 01       	movw	r18, r22
 516:	ac 01       	movw	r20, r24
 518:	bd 01       	movw	r22, r26
 51a:	cf 01       	movw	r24, r30
 51c:	08 95       	ret

0000051e <__umulhisi3>:
 51e:	a2 9f       	mul	r26, r18
 520:	b0 01       	movw	r22, r0
 522:	b3 9f       	mul	r27, r19
 524:	c0 01       	movw	r24, r0
 526:	a3 9f       	mul	r26, r19
 528:	70 0d       	add	r23, r0
 52a:	81 1d       	adc	r24, r1
 52c:	11 24       	eor	r1, r1
 52e:	91 1d       	adc	r25, r1
 530:	b2 9f       	mul	r27, r18
 532:	70 0d       	add	r23, r0
 534:	81 1d       	adc	r24, r1
 536:	11 24       	eor	r1, r1
 538:	91 1d       	adc	r25, r1
 53a:	08 95       	ret

0000053c <__udivmodhi4>:
 53c:	aa 1b       	sub	r26, r26
 53e:	bb 1b       	sub	r27, r27
 540:	51 e1       	ldi	r21, 0x11	; 17
 542:	07 c0       	rjmp	.+14     	; 0x552 <__udivmodhi4_ep>

00000544 <__udivmodhi4_loop>:
 544:	aa 1f       	adc	r26, r26
 546:	bb 1f       	adc	r27, r27
 548:	a6 17       	cp	r26, r22
 54a:	b7 07       	cpc	r27, r23
 54c:	10 f0       	brcs	.+4      	; 0x552 <__udivmodhi4_ep>
 54e:	a6 1b       	sub	r26, r22
 550:	b7 0b       	sbc	r27, r23

00000552 <__udivmodhi4_ep>:
 552:	88 1f       	adc	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	5a 95       	dec	r21
 558:	a9 f7       	brne	.-22     	; 0x544 <__udivmodhi4_loop>
 55a:	80 95       	com	r24
 55c:	90 95       	com	r25
 55e:	bc 01       	movw	r22, r24
 560:	cd 01       	movw	r24, r26
 562:	08 95       	ret

00000564 <_exit>:
 564:	f8 94       	cli

00000566 <__stop_program>:
 566:	ff cf       	rjmp	.-2      	; 0x566 <__stop_program>
