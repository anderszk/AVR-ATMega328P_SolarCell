
prosjekt_mirco.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e9  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000725  00000000  00000000  00000bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b0  00000000  00000000  000012fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  000016ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000418  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000192  00000000  00000000  00001b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001cfa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	uint8_t position = 90;
	uint16_t potMeter;
	uint16_t lightSensor1;
	uint16_t lightSensor2;
	
	ADC_Init();
  80:	0e 94 87 00 	call	0x10e	; 0x10e <ADC_Init>
	Timer1_PWM_init();
  84:	0e 94 56 00 	call	0xac	; 0xac <Timer1_PWM_init>
		
	do{
	
		//potMeter = ADC_Conversion(0);
		// print potMeter to UART
 		lightSensor1 = ADC_Conversion(1);
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	0e 94 65 00 	call	0xca	; 0xca <ADC_Conversion>
// 		lightSensor2 = ADC_Conversion(2);
		position = lightSensor1>>3;//correctPosition(potMeter, lightSensor1, lightSensor2, position);
  8e:	96 95       	lsr	r25
  90:	87 95       	ror	r24
  92:	96 95       	lsr	r25
  94:	87 95       	ror	r24
  96:	96 95       	lsr	r25
  98:	87 95       	ror	r24
  9a:	c8 2f       	mov	r28, r24
		// print
		if (validatePosition(position) == true){
  9c:	0e 94 a3 00 	call	0x146	; 0x146 <validatePosition>
  a0:	88 23       	and	r24, r24
  a2:	91 f3       	breq	.-28     	; 0x88 <main+0x8>
			moveServo(position);
  a4:	8c 2f       	mov	r24, r28
  a6:	0e 94 90 00 	call	0x120	; 0x120 <moveServo>
  aa:	ee cf       	rjmp	.-36     	; 0x88 <main+0x8>

000000ac <Timer1_PWM_init>:
#define POSITION_MAX 180

//Timer initialization
void Timer1_PWM_init(){
	
	DDRB = (1<<DDB1); // Setter PB1 som output. (pin 9)
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	84 b9       	out	0x04, r24	; 4

	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(1<<WGM11)|(0<<WGM10);
  b0:	82 e8       	ldi	r24, 0x82	; 130
  b2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>

	TCCR1B = (1<<CS11)|(1<<WGM13)|(1<<WGM12);
  b6:	8a e1       	ldi	r24, 0x1A	; 26
  b8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	ICR1 = SERVO_PERIOD; // Periodetid på 20ms (50Hz)
  bc:	80 e4       	ldi	r24, 0x40	; 64
  be:	9c e9       	ldi	r25, 0x9C	; 156
  c0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  c4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  c8:	08 95       	ret

000000ca <ADC_Conversion>:


//ADC
int ADC_Conversion(int8_t pin){

	if (pin == 0){
  ca:	81 11       	cpse	r24, r1
  cc:	04 c0       	rjmp	.+8      	; 0xd6 <ADC_Conversion+0xc>
		ADMUX = (1<<REFS0)|(0<<ADLAR); // ADC0
  ce:	80 e4       	ldi	r24, 0x40	; 64
  d0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  d4:	0b c0       	rjmp	.+22     	; 0xec <ADC_Conversion+0x22>
	}
	else if(pin == 1){
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	21 f4       	brne	.+8      	; 0xe2 <ADC_Conversion+0x18>
		ADMUX = (1<<REFS0)|(0<<ADLAR)|(1 << MUX0); // ADC1
  da:	81 e4       	ldi	r24, 0x41	; 65
  dc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  e0:	05 c0       	rjmp	.+10     	; 0xec <ADC_Conversion+0x22>
	}
	else if (pin == 2){
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	89 f4       	brne	.+34     	; 0x108 <ADC_Conversion+0x3e>
		ADMUX = (1<<REFS0)|(0<<ADLAR)|(1 << MUX1); // ADC2  potensiometer
  e6:	82 e4       	ldi	r24, 0x42	; 66
  e8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	else {
		return 0;
		//Flag
	}
	
	ADCSRA |= (1<<ADSC);
  ec:	ea e7       	ldi	r30, 0x7A	; 122
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	80 83       	st	Z, r24
	
	// vent på start-convertion (vent så lenge bittet e
	do {} while (ADCSRA & (1<<ADSC)); // ADCSRA & 0b0100 0000
  f6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  fa:	86 fd       	sbrc	r24, 6
  fc:	fc cf       	rjmp	.-8      	; 0xf6 <ADC_Conversion+0x2c>
	return ADC;
  fe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 102:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 106:	08 95       	ret
	}
	else if (pin == 2){
		ADMUX = (1<<REFS0)|(0<<ADLAR)|(1 << MUX1); // ADC2  potensiometer
	}
	else {
		return 0;
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
	ADCSRA |= (1<<ADSC);
	
	// vent på start-convertion (vent så lenge bittet e
	do {} while (ADCSRA & (1<<ADSC)); // ADCSRA & 0b0100 0000
	return ADC;
}
 10c:	08 95       	ret

0000010e <ADC_Init>:

void ADC_Init(void){
	
	DIDR0 |= (1<<ADC0D); // digital input buffer disable, saves power.
 10e:	ee e7       	ldi	r30, 0x7E	; 126
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	81 60       	ori	r24, 0x01	; 1
 116:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN)|(0b111<<ADPS0);
 118:	87 e8       	ldi	r24, 0x87	; 135
 11a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 11e:	08 95       	ret

00000120 <moveServo>:
}

//kjører servoen
void moveServo(uint8_t position){
	OCR1A = (((position*(SERVO_MAX - SERVO_MIN))/POSITION_MAX) + SERVO_MIN);
 120:	28 2f       	mov	r18, r24
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	a4 eb       	ldi	r26, 0xB4	; 180
 126:	bf e0       	ldi	r27, 0x0F	; 15
 128:	0e 94 cf 00 	call	0x19e	; 0x19e <__umulhisi3>
 12c:	24 eb       	ldi	r18, 0xB4	; 180
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	40 e0       	ldi	r20, 0x00	; 0
 132:	50 e0       	ldi	r21, 0x00	; 0
 134:	0e 94 ad 00 	call	0x15a	; 0x15a <__udivmodsi4>
 138:	2c 52       	subi	r18, 0x2C	; 44
 13a:	3c 4f       	sbci	r19, 0xFC	; 252
 13c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 140:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 144:	08 95       	ret

00000146 <validatePosition>:
}



bool validatePosition(uint8_t position){     // gjør sånn at posisjonen til servo holder seg mellom 0-180 grader
	if (position <= 1){
 146:	82 30       	cpi	r24, 0x02	; 2
 148:	20 f0       	brcs	.+8      	; 0x152 <validatePosition+0xc>
		position = 0;
		return false;
	}
	else if(position >= 180){
 14a:	84 3b       	cpi	r24, 0xB4	; 180
 14c:	20 f0       	brcs	.+8      	; 0x156 <validatePosition+0x10>
		position = 181;
		return false;
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	08 95       	ret


bool validatePosition(uint8_t position){     // gjør sånn at posisjonen til servo holder seg mellom 0-180 grader
	if (position <= 1){
		position = 0;
		return false;
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	08 95       	ret
	else if(position >= 180){
		position = 181;
		return false;
	}
	else{
		return true;
 156:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 158:	08 95       	ret

0000015a <__udivmodsi4>:
 15a:	a1 e2       	ldi	r26, 0x21	; 33
 15c:	1a 2e       	mov	r1, r26
 15e:	aa 1b       	sub	r26, r26
 160:	bb 1b       	sub	r27, r27
 162:	fd 01       	movw	r30, r26
 164:	0d c0       	rjmp	.+26     	; 0x180 <__udivmodsi4_ep>

00000166 <__udivmodsi4_loop>:
 166:	aa 1f       	adc	r26, r26
 168:	bb 1f       	adc	r27, r27
 16a:	ee 1f       	adc	r30, r30
 16c:	ff 1f       	adc	r31, r31
 16e:	a2 17       	cp	r26, r18
 170:	b3 07       	cpc	r27, r19
 172:	e4 07       	cpc	r30, r20
 174:	f5 07       	cpc	r31, r21
 176:	20 f0       	brcs	.+8      	; 0x180 <__udivmodsi4_ep>
 178:	a2 1b       	sub	r26, r18
 17a:	b3 0b       	sbc	r27, r19
 17c:	e4 0b       	sbc	r30, r20
 17e:	f5 0b       	sbc	r31, r21

00000180 <__udivmodsi4_ep>:
 180:	66 1f       	adc	r22, r22
 182:	77 1f       	adc	r23, r23
 184:	88 1f       	adc	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	1a 94       	dec	r1
 18a:	69 f7       	brne	.-38     	; 0x166 <__udivmodsi4_loop>
 18c:	60 95       	com	r22
 18e:	70 95       	com	r23
 190:	80 95       	com	r24
 192:	90 95       	com	r25
 194:	9b 01       	movw	r18, r22
 196:	ac 01       	movw	r20, r24
 198:	bd 01       	movw	r22, r26
 19a:	cf 01       	movw	r24, r30
 19c:	08 95       	ret

0000019e <__umulhisi3>:
 19e:	a2 9f       	mul	r26, r18
 1a0:	b0 01       	movw	r22, r0
 1a2:	b3 9f       	mul	r27, r19
 1a4:	c0 01       	movw	r24, r0
 1a6:	a3 9f       	mul	r26, r19
 1a8:	70 0d       	add	r23, r0
 1aa:	81 1d       	adc	r24, r1
 1ac:	11 24       	eor	r1, r1
 1ae:	91 1d       	adc	r25, r1
 1b0:	b2 9f       	mul	r27, r18
 1b2:	70 0d       	add	r23, r0
 1b4:	81 1d       	adc	r24, r1
 1b6:	11 24       	eor	r1, r1
 1b8:	91 1d       	adc	r25, r1
 1ba:	08 95       	ret

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
