
prosjekt_mirco.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000296  0000032a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000296  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800104  00800104  0000032e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000997  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000788  00000000  00000000  00000daf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036f  00000000  00000000  00001537  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  000018a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042d  00000000  00000000  00001944  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000163  00000000  00000000  00001d71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001ed4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e9       	ldi	r30, 0x96	; 150
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 49 01 	jmp	0x292	; 0x292 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
	
	
	
	do{
		
		potMeter = ADC_Init(1);
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 ac 00 	call	0x158	; 0x158 <ADC_Init>
  ae:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <potMeter+0x1>
  b2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <potMeter>
		lightSensor1 = ADC_Init(2);
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 ac 00 	call	0x158	; 0x158 <ADC_Init>
  be:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <lightSensor1+0x1>
  c2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <lightSensor1>
		lightSensor2 = ADC_Init(3);
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 ac 00 	call	0x158	; 0x158 <ADC_Init>
  ce:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lightSensor2+0x1>
  d2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lightSensor2>

		position = correctPosition(potMeter, lightSensor1, lightSensor2);
  d6:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <lightSensor1>
  da:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <lightSensor1+0x1>
  de:	ac 01       	movw	r20, r24
  e0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <potMeter>
  e4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <potMeter+0x1>
  e8:	0e 94 84 00 	call	0x108	; 0x108 <correctPosition>
  ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		validatePosition(position);
  f4:	0e 94 83 00 	call	0x106	; 0x106 <validatePosition>

		moveServo(position);
  f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 100:	0e 94 cb 00 	call	0x196	; 0x196 <moveServo>
 104:	d0 cf       	rjmp	.-96     	; 0xa6 <main>

00000106 <validatePosition>:
#include "sensorlogic.h"


void validatePosition(int position){ //Checks id the position has exceeded the valid positions
 106:	08 95       	ret

00000108 <correctPosition>:
    else if(position > 180){
        position = 180;
    }
}

int correctPosition(int potValue, int leftSensor, int rightSensor){ //Returns degrees
 108:	fb 01       	movw	r30, r22
 10a:	9a 01       	movw	r18, r20
	
	 potValue = potValue/200;
 10c:	68 ec       	ldi	r22, 0xC8	; 200
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__divmodhi4>
	 
    if (leftSensor > rightSensor){ //Må finne ut av hvilke vei den skal være
 114:	2e 17       	cp	r18, r30
 116:	3f 07       	cpc	r19, r31
 118:	6c f4       	brge	.+26     	; 0x134 <correctPosition+0x2c>
        return (position -= potValue);
 11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 122:	9c 01       	movw	r18, r24
 124:	26 1b       	sub	r18, r22
 126:	37 0b       	sbc	r19, r23
 128:	b9 01       	movw	r22, r18
 12a:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12e:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 132:	0f c0       	rjmp	.+30     	; 0x152 <correctPosition+0x4a>
    }
    if (leftSensor < rightSensor){
 134:	e2 17       	cp	r30, r18
 136:	f3 07       	cpc	r31, r19
 138:	5c f4       	brge	.+22     	; 0x150 <correctPosition+0x48>
        return (position += potValue);
 13a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 13e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 142:	68 0f       	add	r22, r24
 144:	79 1f       	adc	r23, r25
 146:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 14a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 14e:	01 c0       	rjmp	.+2      	; 0x152 <correctPosition+0x4a>
    }
 150:	08 95       	ret
 152:	86 2f       	mov	r24, r22
 154:	97 2f       	mov	r25, r23
 156:	08 95       	ret

00000158 <ADC_Init>:
}

//ADC initialization
int ADC_Init(int pin){

if (pin == 0){
 158:	00 97       	sbiw	r24, 0x00	; 0
 15a:	21 f4       	brne	.+8      	; 0x164 <ADC_Init+0xc>
    ADMUX = (1<<REFS0)|(0<<ADLAR); // ADC0 single ended input and result right adjusted.
 15c:	80 e4       	ldi	r24, 0x40	; 64
 15e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 162:	0c c0       	rjmp	.+24     	; 0x17c <ADC_Init+0x24>
}
else if(pin == 1){
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	91 05       	cpc	r25, r1
 168:	21 f4       	brne	.+8      	; 0x172 <ADC_Init+0x1a>
    ADMUX = (1<<REFS0)|(0<<ADLAR)|(1 << MUX0);
 16a:	81 e4       	ldi	r24, 0x41	; 65
 16c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 170:	05 c0       	rjmp	.+10     	; 0x17c <ADC_Init+0x24>
}
else if (pin == 2)
 172:	02 97       	sbiw	r24, 0x02	; 2
 174:	19 f4       	brne	.+6      	; 0x17c <ADC_Init+0x24>
{
    ADMUX = (1<<REFS0)|(0<<ADLAR)|(1 << MUX1);
 176:	82 e4       	ldi	r24, 0x42	; 66
 178:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
}

DIDR0 |= (1<<ADC0D); // digital input buffer disable, saves power.
 17c:	ee e7       	ldi	r30, 0x7E	; 126
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	81 60       	ori	r24, 0x01	; 1
 184:	80 83       	st	Z, r24

ADCSRA = (1<<ADEN)|(7<<ADPS0)|(1<<ADSC);
 186:	87 ec       	ldi	r24, 0xC7	; 199
 188:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

return ADC;
 18c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 190:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 194:	08 95       	ret

00000196 <moveServo>:

//Moves servo to desired position
void moveServo(int position){
    OCR1A = ((((position - positionMin)*(SERVO_MAX - SERVO_MIN))/(positionMax - positionMin)) + SERVO_MIN);
 196:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__data_end>
 19a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__data_end+0x1>
 19e:	dc 01       	movw	r26, r24
 1a0:	a4 1b       	sub	r26, r20
 1a2:	b5 0b       	sbc	r27, r21
 1a4:	28 e0       	ldi	r18, 0x08	; 8
 1a6:	3c e0       	ldi	r19, 0x0C	; 12
 1a8:	0e 94 1f 01 	call	0x23e	; 0x23e <__usmulhisi3>
 1ac:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <positionMax>
 1b0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <positionMax+0x1>
 1b4:	24 1b       	sub	r18, r20
 1b6:	35 0b       	sbc	r19, r21
 1b8:	03 2e       	mov	r0, r19
 1ba:	00 0c       	add	r0, r0
 1bc:	44 0b       	sbc	r20, r20
 1be:	55 0b       	sbc	r21, r21
 1c0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__udivmodsi4>
 1c4:	28 56       	subi	r18, 0x68	; 104
 1c6:	3c 4f       	sbci	r19, 0xFC	; 252
 1c8:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1cc:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1d0:	08 95       	ret

000001d2 <__divmodhi4>:
 1d2:	97 fb       	bst	r25, 7
 1d4:	07 2e       	mov	r0, r23
 1d6:	16 f4       	brtc	.+4      	; 0x1dc <__divmodhi4+0xa>
 1d8:	00 94       	com	r0
 1da:	07 d0       	rcall	.+14     	; 0x1ea <__divmodhi4_neg1>
 1dc:	77 fd       	sbrc	r23, 7
 1de:	09 d0       	rcall	.+18     	; 0x1f2 <__divmodhi4_neg2>
 1e0:	0e 94 26 01 	call	0x24c	; 0x24c <__udivmodhi4>
 1e4:	07 fc       	sbrc	r0, 7
 1e6:	05 d0       	rcall	.+10     	; 0x1f2 <__divmodhi4_neg2>
 1e8:	3e f4       	brtc	.+14     	; 0x1f8 <__divmodhi4_exit>

000001ea <__divmodhi4_neg1>:
 1ea:	90 95       	com	r25
 1ec:	81 95       	neg	r24
 1ee:	9f 4f       	sbci	r25, 0xFF	; 255
 1f0:	08 95       	ret

000001f2 <__divmodhi4_neg2>:
 1f2:	70 95       	com	r23
 1f4:	61 95       	neg	r22
 1f6:	7f 4f       	sbci	r23, 0xFF	; 255

000001f8 <__divmodhi4_exit>:
 1f8:	08 95       	ret

000001fa <__udivmodsi4>:
 1fa:	a1 e2       	ldi	r26, 0x21	; 33
 1fc:	1a 2e       	mov	r1, r26
 1fe:	aa 1b       	sub	r26, r26
 200:	bb 1b       	sub	r27, r27
 202:	fd 01       	movw	r30, r26
 204:	0d c0       	rjmp	.+26     	; 0x220 <__udivmodsi4_ep>

00000206 <__udivmodsi4_loop>:
 206:	aa 1f       	adc	r26, r26
 208:	bb 1f       	adc	r27, r27
 20a:	ee 1f       	adc	r30, r30
 20c:	ff 1f       	adc	r31, r31
 20e:	a2 17       	cp	r26, r18
 210:	b3 07       	cpc	r27, r19
 212:	e4 07       	cpc	r30, r20
 214:	f5 07       	cpc	r31, r21
 216:	20 f0       	brcs	.+8      	; 0x220 <__udivmodsi4_ep>
 218:	a2 1b       	sub	r26, r18
 21a:	b3 0b       	sbc	r27, r19
 21c:	e4 0b       	sbc	r30, r20
 21e:	f5 0b       	sbc	r31, r21

00000220 <__udivmodsi4_ep>:
 220:	66 1f       	adc	r22, r22
 222:	77 1f       	adc	r23, r23
 224:	88 1f       	adc	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	1a 94       	dec	r1
 22a:	69 f7       	brne	.-38     	; 0x206 <__udivmodsi4_loop>
 22c:	60 95       	com	r22
 22e:	70 95       	com	r23
 230:	80 95       	com	r24
 232:	90 95       	com	r25
 234:	9b 01       	movw	r18, r22
 236:	ac 01       	movw	r20, r24
 238:	bd 01       	movw	r22, r26
 23a:	cf 01       	movw	r24, r30
 23c:	08 95       	ret

0000023e <__usmulhisi3>:
 23e:	0e 94 3a 01 	call	0x274	; 0x274 <__umulhisi3>

00000242 <__usmulhisi3_tail>:
 242:	b7 ff       	sbrs	r27, 7
 244:	08 95       	ret
 246:	82 1b       	sub	r24, r18
 248:	93 0b       	sbc	r25, r19
 24a:	08 95       	ret

0000024c <__udivmodhi4>:
 24c:	aa 1b       	sub	r26, r26
 24e:	bb 1b       	sub	r27, r27
 250:	51 e1       	ldi	r21, 0x11	; 17
 252:	07 c0       	rjmp	.+14     	; 0x262 <__udivmodhi4_ep>

00000254 <__udivmodhi4_loop>:
 254:	aa 1f       	adc	r26, r26
 256:	bb 1f       	adc	r27, r27
 258:	a6 17       	cp	r26, r22
 25a:	b7 07       	cpc	r27, r23
 25c:	10 f0       	brcs	.+4      	; 0x262 <__udivmodhi4_ep>
 25e:	a6 1b       	sub	r26, r22
 260:	b7 0b       	sbc	r27, r23

00000262 <__udivmodhi4_ep>:
 262:	88 1f       	adc	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	5a 95       	dec	r21
 268:	a9 f7       	brne	.-22     	; 0x254 <__udivmodhi4_loop>
 26a:	80 95       	com	r24
 26c:	90 95       	com	r25
 26e:	bc 01       	movw	r22, r24
 270:	cd 01       	movw	r24, r26
 272:	08 95       	ret

00000274 <__umulhisi3>:
 274:	a2 9f       	mul	r26, r18
 276:	b0 01       	movw	r22, r0
 278:	b3 9f       	mul	r27, r19
 27a:	c0 01       	movw	r24, r0
 27c:	a3 9f       	mul	r26, r19
 27e:	70 0d       	add	r23, r0
 280:	81 1d       	adc	r24, r1
 282:	11 24       	eor	r1, r1
 284:	91 1d       	adc	r25, r1
 286:	b2 9f       	mul	r27, r18
 288:	70 0d       	add	r23, r0
 28a:	81 1d       	adc	r24, r1
 28c:	11 24       	eor	r1, r1
 28e:	91 1d       	adc	r25, r1
 290:	08 95       	ret

00000292 <_exit>:
 292:	f8 94       	cli

00000294 <__stop_program>:
 294:	ff cf       	rjmp	.-2      	; 0x294 <__stop_program>
