
prosjekt_mirco.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000488  000004fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000488  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000052e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000560  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f8c  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000908  00000000  00000000  0000160c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000766  00000000  00000000  00001f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000218  00000000  00000000  0000267c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000055f  00000000  00000000  00002894  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007e5  00000000  00000000  00002df3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  000035d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e8       	ldi	r30, 0x88	; 136
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  8e:	0c 94 42 02 	jmp	0x484	; 0x484 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <readPin>:
#include "usart.h"

#define USART_BAUDRATE 9600
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)

void readPin(int pin1, int pin2, int pin3){
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	0f 93       	push	r16
  9c:	1f 93       	push	r17
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	7c 01       	movw	r14, r24
  a4:	8b 01       	movw	r16, r22
  a6:	ea 01       	movw	r28, r20
	printString(" lightSensor1: ");
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	91 e0       	ldi	r25, 0x01	; 1
  ac:	0e 94 3c 01 	call	0x278	; 0x278 <printString>
	printWord(pin1);
  b0:	c7 01       	movw	r24, r14
  b2:	0e 94 4f 01 	call	0x29e	; 0x29e <printWord>
	printString(",");
  b6:	80 e1       	ldi	r24, 0x10	; 16
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	0e 94 3c 01 	call	0x278	; 0x278 <printString>
	printString(" lightSensor2: ");
  be:	82 e1       	ldi	r24, 0x12	; 18
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	0e 94 3c 01 	call	0x278	; 0x278 <printString>
	printWord(pin2);
  c6:	c8 01       	movw	r24, r16
  c8:	0e 94 4f 01 	call	0x29e	; 0x29e <printWord>
	printString(",");
  cc:	80 e1       	ldi	r24, 0x10	; 16
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	0e 94 3c 01 	call	0x278	; 0x278 <printString>
	printString(" potMeter: ");
  d4:	82 e2       	ldi	r24, 0x22	; 34
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	0e 94 3c 01 	call	0x278	; 0x278 <printString>
	printWord(pin3);
  dc:	ce 01       	movw	r24, r28
  de:	0e 94 4f 01 	call	0x29e	; 0x29e <printWord>
	printString("\r\n");
  e2:	8e e2       	ldi	r24, 0x2E	; 46
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	0e 94 3c 01 	call	0x278	; 0x278 <printString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	83 ed       	ldi	r24, 0xD3	; 211
  ee:	90 e3       	ldi	r25, 0x30	; 48
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <readPin+0x5a>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <readPin+0x64>
  fa:	00 00       	nop
	_delay_ms(1000);
}
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	1f 91       	pop	r17
 102:	0f 91       	pop	r16
 104:	ff 90       	pop	r15
 106:	ef 90       	pop	r14
 108:	08 95       	ret

0000010a <main>:
	uint16_t potMeter;
	uint16_t lightSensor1;
	uint16_t lightSensor2;
	
	
	UBRR0 = BAUD_PRESCALE;
 10a:	87 e6       	ldi	r24, 0x67	; 103
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 112:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 116:	88 e1       	ldi	r24, 0x18	; 24
 118:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	initUSART();
 11c:	0e 94 23 01 	call	0x246	; 0x246 <initUSART>
	ADC_Init();
 120:	0e 94 e7 00 	call	0x1ce	; 0x1ce <ADC_Init>
	Timer1_PWM_init();
 124:	0e 94 b6 00 	call	0x16c	; 0x16c <Timer1_PWM_init>
	_delay_ms(1000);
}

int main(void) {
	
	uint8_t position = 90;
 128:	ca e5       	ldi	r28, 0x5A	; 90
	ADC_Init();
	Timer1_PWM_init();
	
	do{
		
		potMeter = ADC_Conversion(0);
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	0e 94 c5 00 	call	0x18a	; 0x18a <ADC_Conversion>
 130:	6c 01       	movw	r12, r24
		lightSensor1 = ADC_Conversion(1);
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 c5 00 	call	0x18a	; 0x18a <ADC_Conversion>
 138:	8c 01       	movw	r16, r24
		
		lightSensor2 = ADC_Conversion(2);
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	0e 94 c5 00 	call	0x18a	; 0x18a <ADC_Conversion>
 140:	7c 01       	movw	r14, r24
		readPin(lightSensor1, lightSensor2, potMeter);
 142:	a6 01       	movw	r20, r12
 144:	bc 01       	movw	r22, r24
 146:	c8 01       	movw	r24, r16
 148:	0e 94 4b 00 	call	0x96	; 0x96 <readPin>
		
		//position = lightSensor1>>3;
		position = correctPosition(300, lightSensor1, lightSensor2, position);
 14c:	2c 2f       	mov	r18, r28
 14e:	a7 01       	movw	r20, r14
 150:	b8 01       	movw	r22, r16
 152:	8c e2       	ldi	r24, 0x2C	; 44
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 08 01 	call	0x210	; 0x210 <correctPosition>
 15a:	c8 2f       	mov	r28, r24
		if (validatePosition(position) == true){
 15c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <validatePosition>
 160:	88 23       	and	r24, r24
 162:	19 f3       	breq	.-58     	; 0x12a <main+0x20>
			moveServo(position);
 164:	8c 2f       	mov	r24, r28
 166:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <moveServo>
 16a:	df cf       	rjmp	.-66     	; 0x12a <main+0x20>

0000016c <Timer1_PWM_init>:
#define POSITION_MAX 180

//Timer initialization
void Timer1_PWM_init(){
	
	DDRB = (1<<DDB1); // Setter PB1 som output. (pin 9)
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	84 b9       	out	0x04, r24	; 4

	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(1<<WGM11)|(0<<WGM10);
 170:	82 e8       	ldi	r24, 0x82	; 130
 172:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>

	TCCR1B = (1<<CS11)|(1<<WGM13)|(1<<WGM12);
 176:	8a e1       	ldi	r24, 0x1A	; 26
 178:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	ICR1 = SERVO_PERIOD; // Periodetid p√• 20ms (50Hz)
 17c:	80 e4       	ldi	r24, 0x40	; 64
 17e:	9c e9       	ldi	r25, 0x9C	; 156
 180:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 184:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 188:	08 95       	ret

0000018a <ADC_Conversion>:


//ADC
int ADC_Conversion(int8_t pin){

	if (pin == 0){
 18a:	81 11       	cpse	r24, r1
 18c:	04 c0       	rjmp	.+8      	; 0x196 <ADC_Conversion+0xc>
		ADMUX = (1<<REFS0)|(0<<ADLAR)|(0 << MUX1)|(0 << MUX0); // ADC0
 18e:	80 e4       	ldi	r24, 0x40	; 64
 190:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 194:	0b c0       	rjmp	.+22     	; 0x1ac <ADC_Conversion+0x22>
	}
	else if(pin == 1){
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	21 f4       	brne	.+8      	; 0x1a2 <ADC_Conversion+0x18>
		ADMUX = (1<<REFS0)|(0<<ADLAR)|(0 << MUX1)|(1 << MUX0); // ADC1
 19a:	81 e4       	ldi	r24, 0x41	; 65
 19c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 1a0:	05 c0       	rjmp	.+10     	; 0x1ac <ADC_Conversion+0x22>
	}
	else if (pin == 2){
 1a2:	82 30       	cpi	r24, 0x02	; 2
 1a4:	89 f4       	brne	.+34     	; 0x1c8 <ADC_Conversion+0x3e>
		ADMUX = (1<<REFS0)|(0<<ADLAR)|(1 << MUX1)|(0 << MUX0); // ADC2  potensiometer
 1a6:	82 e4       	ldi	r24, 0x42	; 66
 1a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	else {
		return 0;
		//Flag
	}
	
	ADCSRA |= (1<<ADSC);
 1ac:	ea e7       	ldi	r30, 0x7A	; 122
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	80 64       	ori	r24, 0x40	; 64
 1b4:	80 83       	st	Z, r24
	
	// vent p√• start-convertion (vent s√• lenge bittet e
	do {} while (ADCSRA & (1<<ADSC)); // ADCSRA & 0b0100 0000
 1b6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1ba:	86 fd       	sbrc	r24, 6
 1bc:	fc cf       	rjmp	.-8      	; 0x1b6 <ADC_Conversion+0x2c>
	return ADC;
 1be:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1c2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1c6:	08 95       	ret
	}
	else if (pin == 2){
		ADMUX = (1<<REFS0)|(0<<ADLAR)|(1 << MUX1)|(0 << MUX0); // ADC2  potensiometer
	}
	else {
		return 0;
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
	ADCSRA |= (1<<ADSC);
	
	// vent p√• start-convertion (vent s√• lenge bittet e
	do {} while (ADCSRA & (1<<ADSC)); // ADCSRA & 0b0100 0000
	return ADC;
}
 1cc:	08 95       	ret

000001ce <ADC_Init>:

void ADC_Init(void){
	ADCSRA = (1<<ADEN)|(0b111<<ADPS0);
 1ce:	87 e8       	ldi	r24, 0x87	; 135
 1d0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1d4:	08 95       	ret

000001d6 <moveServo>:
}

//kj√∏rer servoen
void moveServo(uint8_t position){
	OCR1A = (((position*(SERVO_MAX - SERVO_MIN))/POSITION_MAX) + SERVO_MIN);
 1d6:	28 2f       	mov	r18, r24
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	a4 eb       	ldi	r26, 0xB4	; 180
 1dc:	bf e0       	ldi	r27, 0x0F	; 15
 1de:	0e 94 1f 02 	call	0x43e	; 0x43e <__umulhisi3>
 1e2:	24 eb       	ldi	r18, 0xB4	; 180
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	40 e0       	ldi	r20, 0x00	; 0
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__udivmodsi4>
 1ee:	2c 52       	subi	r18, 0x2C	; 44
 1f0:	3c 4f       	sbci	r19, 0xFC	; 252
 1f2:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1f6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1fa:	08 95       	ret

000001fc <validatePosition>:
}



bool validatePosition(uint8_t position){     // gj√∏r s√•nn at posisjonen til servo holder seg mellom 0-180 grader
	if (position <= 1){
 1fc:	82 30       	cpi	r24, 0x02	; 2
 1fe:	20 f0       	brcs	.+8      	; 0x208 <validatePosition+0xc>
		position = 0;
		return false;
	}
	else if(position >= 180){
 200:	84 3b       	cpi	r24, 0xB4	; 180
 202:	20 f0       	brcs	.+8      	; 0x20c <validatePosition+0x10>
		position = 181;
		return false;
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	08 95       	ret


bool validatePosition(uint8_t position){     // gj√∏r s√•nn at posisjonen til servo holder seg mellom 0-180 grader
	if (position <= 1){
		position = 0;
		return false;
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	08 95       	ret
	else if(position >= 180){
		position = 181;
		return false;
	}
	else{
		return true;
 20c:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 20e:	08 95       	ret

00000210 <correctPosition>:

int correctPosition(int16_t potValue, int16_t leftSensor, int16_t rightSensor, uint8_t position){   //returnerer grader til servo
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	eb 01       	movw	r28, r22
 216:	fa 01       	movw	r30, r20
	
	potValue = potValue/200;
 218:	68 ec       	ldi	r22, 0xC8	; 200
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__divmodhi4>
	
	if (leftSensor > rightSensor){     //M√• finne ut av hvilken vei den skal v√¶re
 220:	ec 17       	cp	r30, r28
 222:	fd 07       	cpc	r31, r29
 224:	24 f4       	brge	.+8      	; 0x22e <correctPosition+0x1e>
		return (position -= potValue);
 226:	26 1b       	sub	r18, r22
 228:	82 2f       	mov	r24, r18
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	09 c0       	rjmp	.+18     	; 0x240 <correctPosition+0x30>
	}
	else if (leftSensor < rightSensor){
 22e:	ce 17       	cp	r28, r30
 230:	df 07       	cpc	r29, r31
 232:	24 f4       	brge	.+8      	; 0x23c <correctPosition+0x2c>
		return (position += potValue);
 234:	26 0f       	add	r18, r22
 236:	82 2f       	mov	r24, r18
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <correctPosition+0x30>
	}
	else{
		return 0;
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
	}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <initUSART>:
void printByte(uint8_t byte) {
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
  transmitByte('0' + (byte % 10));                             /* Ones */
}
 246:	87 e6       	ldi	r24, 0x67	; 103
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 24e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 252:	e0 ec       	ldi	r30, 0xC0	; 192
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	8d 7f       	andi	r24, 0xFD	; 253
 25a:	80 83       	st	Z, r24
 25c:	88 e1       	ldi	r24, 0x18	; 24
 25e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 262:	86 e0       	ldi	r24, 0x06	; 6
 264:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 268:	08 95       	ret

0000026a <transmitByte>:
 26a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 26e:	95 ff       	sbrs	r25, 5
 270:	fc cf       	rjmp	.-8      	; 0x26a <transmitByte>
 272:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 276:	08 95       	ret

00000278 <printString>:
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	8c 01       	movw	r16, r24
 280:	c0 e0       	ldi	r28, 0x00	; 0
 282:	03 c0       	rjmp	.+6      	; 0x28a <printString+0x12>
 284:	0e 94 35 01 	call	0x26a	; 0x26a <transmitByte>
 288:	cf 5f       	subi	r28, 0xFF	; 255
 28a:	f8 01       	movw	r30, r16
 28c:	ec 0f       	add	r30, r28
 28e:	f1 1d       	adc	r31, r1
 290:	80 81       	ld	r24, Z
 292:	81 11       	cpse	r24, r1
 294:	f7 cf       	rjmp	.-18     	; 0x284 <printString+0xc>
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	08 95       	ret

0000029e <printWord>:

void printWord(uint16_t word) {
 29e:	0f 93       	push	r16
 2a0:	1f 93       	push	r17
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	8c 01       	movw	r16, r24
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
 2a8:	9c 01       	movw	r18, r24
 2aa:	36 95       	lsr	r19
 2ac:	27 95       	ror	r18
 2ae:	36 95       	lsr	r19
 2b0:	27 95       	ror	r18
 2b2:	36 95       	lsr	r19
 2b4:	27 95       	ror	r18
 2b6:	a5 ec       	ldi	r26, 0xC5	; 197
 2b8:	b0 e2       	ldi	r27, 0x20	; 32
 2ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__umulhisi3>
 2be:	ac 01       	movw	r20, r24
 2c0:	52 95       	swap	r21
 2c2:	42 95       	swap	r20
 2c4:	4f 70       	andi	r20, 0x0F	; 15
 2c6:	45 27       	eor	r20, r21
 2c8:	5f 70       	andi	r21, 0x0F	; 15
 2ca:	45 27       	eor	r20, r21
 2cc:	9a 01       	movw	r18, r20
 2ce:	ad ec       	ldi	r26, 0xCD	; 205
 2d0:	bc ec       	ldi	r27, 0xCC	; 204
 2d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__umulhisi3>
 2d6:	96 95       	lsr	r25
 2d8:	87 95       	ror	r24
 2da:	96 95       	lsr	r25
 2dc:	87 95       	ror	r24
 2de:	96 95       	lsr	r25
 2e0:	87 95       	ror	r24
 2e2:	9c 01       	movw	r18, r24
 2e4:	22 0f       	add	r18, r18
 2e6:	33 1f       	adc	r19, r19
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	82 0f       	add	r24, r18
 2f6:	93 1f       	adc	r25, r19
 2f8:	9a 01       	movw	r18, r20
 2fa:	28 1b       	sub	r18, r24
 2fc:	39 0b       	sbc	r19, r25
 2fe:	c9 01       	movw	r24, r18
 300:	80 5d       	subi	r24, 0xD0	; 208
 302:	0e 94 35 01 	call	0x26a	; 0x26a <transmitByte>
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
 306:	98 01       	movw	r18, r16
 308:	36 95       	lsr	r19
 30a:	27 95       	ror	r18
 30c:	36 95       	lsr	r19
 30e:	27 95       	ror	r18
 310:	ab e7       	ldi	r26, 0x7B	; 123
 312:	b4 e1       	ldi	r27, 0x14	; 20
 314:	0e 94 1f 02 	call	0x43e	; 0x43e <__umulhisi3>
 318:	ac 01       	movw	r20, r24
 31a:	56 95       	lsr	r21
 31c:	47 95       	ror	r20
 31e:	9a 01       	movw	r18, r20
 320:	ad ec       	ldi	r26, 0xCD	; 205
 322:	bc ec       	ldi	r27, 0xCC	; 204
 324:	0e 94 1f 02 	call	0x43e	; 0x43e <__umulhisi3>
 328:	96 95       	lsr	r25
 32a:	87 95       	ror	r24
 32c:	96 95       	lsr	r25
 32e:	87 95       	ror	r24
 330:	96 95       	lsr	r25
 332:	87 95       	ror	r24
 334:	9c 01       	movw	r18, r24
 336:	22 0f       	add	r18, r18
 338:	33 1f       	adc	r19, r19
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	82 0f       	add	r24, r18
 348:	93 1f       	adc	r25, r19
 34a:	9a 01       	movw	r18, r20
 34c:	28 1b       	sub	r18, r24
 34e:	39 0b       	sbc	r19, r25
 350:	c9 01       	movw	r24, r18
 352:	80 5d       	subi	r24, 0xD0	; 208
 354:	0e 94 35 01 	call	0x26a	; 0x26a <transmitByte>
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 358:	98 01       	movw	r18, r16
 35a:	ad ec       	ldi	r26, 0xCD	; 205
 35c:	bc ec       	ldi	r27, 0xCC	; 204
 35e:	0e 94 1f 02 	call	0x43e	; 0x43e <__umulhisi3>
 362:	ec 01       	movw	r28, r24
 364:	d6 95       	lsr	r29
 366:	c7 95       	ror	r28
 368:	d6 95       	lsr	r29
 36a:	c7 95       	ror	r28
 36c:	d6 95       	lsr	r29
 36e:	c7 95       	ror	r28
 370:	9e 01       	movw	r18, r28
 372:	0e 94 1f 02 	call	0x43e	; 0x43e <__umulhisi3>
 376:	96 95       	lsr	r25
 378:	87 95       	ror	r24
 37a:	96 95       	lsr	r25
 37c:	87 95       	ror	r24
 37e:	96 95       	lsr	r25
 380:	87 95       	ror	r24
 382:	9c 01       	movw	r18, r24
 384:	22 0f       	add	r18, r18
 386:	33 1f       	adc	r19, r19
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	82 0f       	add	r24, r18
 396:	93 1f       	adc	r25, r19
 398:	9e 01       	movw	r18, r28
 39a:	28 1b       	sub	r18, r24
 39c:	39 0b       	sbc	r19, r25
 39e:	c9 01       	movw	r24, r18
 3a0:	80 5d       	subi	r24, 0xD0	; 208
 3a2:	0e 94 35 01 	call	0x26a	; 0x26a <transmitByte>
  transmitByte('0' + (word % 10));                             /* Ones */
 3a6:	ce 01       	movw	r24, r28
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	cc 0f       	add	r28, r28
 3ae:	dd 1f       	adc	r29, r29
 3b0:	cc 0f       	add	r28, r28
 3b2:	dd 1f       	adc	r29, r29
 3b4:	cc 0f       	add	r28, r28
 3b6:	dd 1f       	adc	r29, r29
 3b8:	c8 0f       	add	r28, r24
 3ba:	d9 1f       	adc	r29, r25
 3bc:	c8 01       	movw	r24, r16
 3be:	8c 1b       	sub	r24, r28
 3c0:	9d 0b       	sbc	r25, r29
 3c2:	80 5d       	subi	r24, 0xD0	; 208
 3c4:	0e 94 35 01 	call	0x26a	; 0x26a <transmitByte>
}
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	08 95       	ret

000003d2 <__divmodhi4>:
 3d2:	97 fb       	bst	r25, 7
 3d4:	07 2e       	mov	r0, r23
 3d6:	16 f4       	brtc	.+4      	; 0x3dc <__divmodhi4+0xa>
 3d8:	00 94       	com	r0
 3da:	07 d0       	rcall	.+14     	; 0x3ea <__divmodhi4_neg1>
 3dc:	77 fd       	sbrc	r23, 7
 3de:	09 d0       	rcall	.+18     	; 0x3f2 <__divmodhi4_neg2>
 3e0:	0e 94 2e 02 	call	0x45c	; 0x45c <__udivmodhi4>
 3e4:	07 fc       	sbrc	r0, 7
 3e6:	05 d0       	rcall	.+10     	; 0x3f2 <__divmodhi4_neg2>
 3e8:	3e f4       	brtc	.+14     	; 0x3f8 <__divmodhi4_exit>

000003ea <__divmodhi4_neg1>:
 3ea:	90 95       	com	r25
 3ec:	81 95       	neg	r24
 3ee:	9f 4f       	sbci	r25, 0xFF	; 255
 3f0:	08 95       	ret

000003f2 <__divmodhi4_neg2>:
 3f2:	70 95       	com	r23
 3f4:	61 95       	neg	r22
 3f6:	7f 4f       	sbci	r23, 0xFF	; 255

000003f8 <__divmodhi4_exit>:
 3f8:	08 95       	ret

000003fa <__udivmodsi4>:
 3fa:	a1 e2       	ldi	r26, 0x21	; 33
 3fc:	1a 2e       	mov	r1, r26
 3fe:	aa 1b       	sub	r26, r26
 400:	bb 1b       	sub	r27, r27
 402:	fd 01       	movw	r30, r26
 404:	0d c0       	rjmp	.+26     	; 0x420 <__udivmodsi4_ep>

00000406 <__udivmodsi4_loop>:
 406:	aa 1f       	adc	r26, r26
 408:	bb 1f       	adc	r27, r27
 40a:	ee 1f       	adc	r30, r30
 40c:	ff 1f       	adc	r31, r31
 40e:	a2 17       	cp	r26, r18
 410:	b3 07       	cpc	r27, r19
 412:	e4 07       	cpc	r30, r20
 414:	f5 07       	cpc	r31, r21
 416:	20 f0       	brcs	.+8      	; 0x420 <__udivmodsi4_ep>
 418:	a2 1b       	sub	r26, r18
 41a:	b3 0b       	sbc	r27, r19
 41c:	e4 0b       	sbc	r30, r20
 41e:	f5 0b       	sbc	r31, r21

00000420 <__udivmodsi4_ep>:
 420:	66 1f       	adc	r22, r22
 422:	77 1f       	adc	r23, r23
 424:	88 1f       	adc	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	1a 94       	dec	r1
 42a:	69 f7       	brne	.-38     	; 0x406 <__udivmodsi4_loop>
 42c:	60 95       	com	r22
 42e:	70 95       	com	r23
 430:	80 95       	com	r24
 432:	90 95       	com	r25
 434:	9b 01       	movw	r18, r22
 436:	ac 01       	movw	r20, r24
 438:	bd 01       	movw	r22, r26
 43a:	cf 01       	movw	r24, r30
 43c:	08 95       	ret

0000043e <__umulhisi3>:
 43e:	a2 9f       	mul	r26, r18
 440:	b0 01       	movw	r22, r0
 442:	b3 9f       	mul	r27, r19
 444:	c0 01       	movw	r24, r0
 446:	a3 9f       	mul	r26, r19
 448:	70 0d       	add	r23, r0
 44a:	81 1d       	adc	r24, r1
 44c:	11 24       	eor	r1, r1
 44e:	91 1d       	adc	r25, r1
 450:	b2 9f       	mul	r27, r18
 452:	70 0d       	add	r23, r0
 454:	81 1d       	adc	r24, r1
 456:	11 24       	eor	r1, r1
 458:	91 1d       	adc	r25, r1
 45a:	08 95       	ret

0000045c <__udivmodhi4>:
 45c:	aa 1b       	sub	r26, r26
 45e:	bb 1b       	sub	r27, r27
 460:	51 e1       	ldi	r21, 0x11	; 17
 462:	07 c0       	rjmp	.+14     	; 0x472 <__udivmodhi4_ep>

00000464 <__udivmodhi4_loop>:
 464:	aa 1f       	adc	r26, r26
 466:	bb 1f       	adc	r27, r27
 468:	a6 17       	cp	r26, r22
 46a:	b7 07       	cpc	r27, r23
 46c:	10 f0       	brcs	.+4      	; 0x472 <__udivmodhi4_ep>
 46e:	a6 1b       	sub	r26, r22
 470:	b7 0b       	sbc	r27, r23

00000472 <__udivmodhi4_ep>:
 472:	88 1f       	adc	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	5a 95       	dec	r21
 478:	a9 f7       	brne	.-22     	; 0x464 <__udivmodhi4_loop>
 47a:	80 95       	com	r24
 47c:	90 95       	com	r25
 47e:	bc 01       	movw	r22, r24
 480:	cd 01       	movw	r24, r26
 482:	08 95       	ret

00000484 <_exit>:
 484:	f8 94       	cli

00000486 <__stop_program>:
 486:	ff cf       	rjmp	.-2      	; 0x486 <__stop_program>
